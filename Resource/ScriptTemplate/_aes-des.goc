package main

//仅允许使用官方包
import (
	"net/http"
)

// 脚本最下方定义了一些常用函数
// 请勿修改此结构体
type HTTP struct {
	uniqueId int                        `json:"uniqueId"` //请求唯一ID
	Break    bool                       `json:"Break"`    //是否需要设置断点调试,设置后可以在软件界面修改数据
	Display  bool                       `json:"Display"`  //是否需要显示到列表中 [仅Type=1有效]
	Type     int                        `json:"Type"`     //1=发起请求,2=请求完成,3=请求失败 [不可修改]
	PID      int                        `json:"PID"`      //由哪个进程发送的数据,若是为0表示通过代理连接
	URL      string                     `json:"URL"`      //[仅Type=1 可修改]请求的URL
	Method   string                     `json:"Method"`   //[仅Type=1 可修改]
	Header   http.Header                `json:"Header"`   //请求的协议头
	Body     []byte                     `json:"Body"`     //请求的Body
	SetAgent func(ProxyUrl string) bool `json:"-"`        //设置代理,[仅Type=1时有效],格式 socket5://admin:123456@127.0.0.1:8888 或 http://admin:123456@127.0.0.1:8888
	Response struct {                   //[如果Type=1 操作此对象数据,将不发出请求]
		Header    http.Header `json:"Header"`    //响应的协议头
		Body      []byte      `json:"Body"`      //响应的数据
		StateCode int         `json:"StateCode"` //响应的状态码
	} `json:"Response"`
}

// 脚本回调事件 -> HTTP发起请求、HTTP响应请求、HTTP请求错误
func HttpRequestCallbackFunction(Sunny *HTTP) {
	//当收到HTTP请求响应时
	if Sunny.Type == 2 {
		//定位请求,如果URL中不包含xxxxxxxxxxx,直接返回
		if !Contains(Sunny.URL, "xxxxxxxxxxxxxxxxxxxxx") {
			return
		}
		/*

			AES、DES 加密解密
			        GoAESCBCEncode(key,iv,Padding, data)    AES CBC 加密
			        GoAESCBCDecrypt(key,iv,Padding, data)   AES CBC     解密
			        GoAESECBEncode(key,Padding, data)       AES EBC 加密
			        GoAESECBDecrypt(key,Padding, data)      AES EBC     解密
			        GoDESCBCEncode(key,iv,Padding, data)    DES CBC 加密
			        GoDESCBCDecrypt(key,iv,Padding, data)   DES CBC     解密
			        GoDESECBEncode(key,Padding, data)       DES EBC 加密
			        GoDESECBDecrypt(key,Padding, data)      DES EBC     解密
			        Go3DESCBCEncode(key,iv,Padding, data)   3DES CBC 加密
			        Go3DESCBCDecrypt(key,iv,Padding, data)  3DES CBC    解密
			        Go3DESECBEncode(key,Padding, data)      3DES EBC 加密
			        Go3DESECBDecrypt(key,Padding, data)     3DES EBC    解密

			以上函数参数一致:
			    key         可以是字符串(string)也可以是字节数组([]byte)
			    iv          可以是字符串(string)也可以是字节数组([]byte)
			    Padding     类型字符串 "NoPadding" "Zero" "Iso10126" "AnsiX923" "Iso97971" "pkcs5"
			    data        类型字节数组([]byte)

			返回值:(两个返回值)
				返回值1:加密/解密的的字节数组([]byte)
				返回值2:错误信息 成功返回nil

		*/

		//下面代码仅演示  AES CBC Decrypt 上面函数使用方式一致

		/*
			场景1:
			假设这个请求 响应的数据是 AES CBC PKCS5 加密的
				假设 key 是 2023202320232023
				假设 iv  是 1234567887654321
				假设数据是十六进制字符串 7F18C390DE4A29D478EE0B3DE8643F5B
		*/
		//先将十六进制字符串转为字节数组
		HexData := GoHexDecode(string(Sunny.Response.Body))
		if len(HexData) < 1 {
			Log("GoHexDecode 失败")
			return
		}
		//解密数据
		DecData, err := GoAESCBCDecrypt("2023202320232023", "1234567887654321", "PKCS5", HexData)
		if err != nil {
			Log("Go AES CBC Decrypt 失败", err)
			return
		}
		//将解密结果转为字符串
		DecStr := string(DecData)
		//打印字符串
		Log(DecStr)
		//如果需要将解密结果替换到响应的数据
		Sunny.Response.Body = DecData

		/*
			场景2:
			假设这个请求 响应的数据是 AES CBC PKCS5 加密的
				假设 key 是 2023202320232023
				假设 iv  是 1234567887654321
				假设数据是Base64字符串 fxjDkN5KKdR47gs96GQ/Ww==
		*/
		//先将Base64字符串转为字节数组
		Base64Data := GoBase64Decode(string(Sunny.Response.Body))
		if len(Base64Data) < 1 {
			Log("GoBase64Decode 失败")
			return
		}
		//解密数据
		DecData2, err := GoAESCBCDecrypt("2023202320232023", "1234567887654321", "PKCS5", Base64Data)
		if err != nil {
			Log("Go AES CBC Decrypt 失败", err)
			return
		}
		//将解密结果转为字符串
		DecStr2 := string(DecData2)
		//打印字符串
		Log(DecStr2)
		//如果需要将解密结果替换到响应的数据
		Sunny.Response.Body = DecData
	}
}

// 请勿修改此结构体
type WebSocket struct {
	uniqueId         int                                     //请求唯一ID
	Display          bool                                    //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                                     //1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开 [不可修改]
	PID              int                                     //由哪个进程发送的数据,若是为0表示通过代理连接
	URL              string                                  //连接的URL
	Method           string                                  //连接时的Method 一般为 GET
	Header           http.Header                             //连接时携带的协议头
	MessageType      int                                     //Websocket消息Body的类型1=Text 2=Binary 8=Close 9=Ping 10=Pong
	Body             []byte                                  //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	SendDataToServer func(MessageType int, data []byte) bool //向服务器发送数据的函数
	SendDataToClient func(MessageType int, data []byte) bool //向客户端发送数据的函数
	Close            func() bool                             //关闭、断开此WebSocket会话
}

// WebSocket回调事件 -> 发送消息、收到消息、连接成功、连接断开
func WebSocketCallbackFunction(Sunny *WebSocket) {

}

// 请勿修改此结构体
type TcpSocket struct {
	uniqueId         int                          //请求唯一ID
	Display          bool                         //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                          //0=即将连接,1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开
	PID              int                          //由哪个进程发送的数据,若是为0表示通过代理连接
	Body             []byte                       //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	LocalAddress     string                       //本地地址
	RemoteAddress    string                       //远程地址
	SetConnectionIP  func(NewAddress string) bool //重定向到新地址,[仅Type=0时有效]
	SetAgent         func(ProxyUrl string) bool   //设置代理,[仅Type=0时有效],格式socket5://admin:123456@127.0.0.1:8888
	SendDataToServer func(data []byte) bool       //向服务器发送数据的函数
	SendDataToClient func(data []byte) bool       //向客户端发送数据的函数
	Close            func() bool                  //关闭、断开此TCP会话
}

// tcp回调事件 -> 即将连接、发送消息、收到消息、连接成功、连接断开
func tcpCallbackFunction(Sunny *TcpSocket) {

}

type UdpSocket struct {
	Display       bool   //是否需要显示到列表中 [仅Type=2、3有效]
	uniqueId      int    //请求唯一ID
	Type          int    //1=客户端发送数据,2=客户端收到数据,3=连接断开
	PID           int    //由哪个进程发送的数据,若是为0表示通过代理连接
	LocalAddress  string //本地地址
	RemoteAddress string //远程地址
	Body          []byte //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
}

// udp回调事件 -> 发送消息、收到消息、连接断开
func udpCallbackFunction(Sunny *UdpSocket) {

}

